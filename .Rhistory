mutate(state_Name = as.character(state_Name)) |>                 # changes to character type so join works by two character vectors
left_join(regions, by = "state_Name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query() |>
req_perform() |>
resp_body_json(simplifyDataFrame = TRUE)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases<- request(api) |>
req_url_query(`$limit` = "10000000000") |>
req_perform() |>
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases) |>
mutate(cases = as.numeric(cases),
date = as.Date(date))
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
)
# recreating cases for this question because I had already changed date from type character to date in a previous question
casesq13<- request(api) |>
req_url_query(`$limit` = "10000000000") |>
req_perform() |>
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases) |>
mutate(year = year(date), month = month(date, label = TRUE), cases = as.numeric(cases)) |>         # label = TRUE gets month name
filter(year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarize(total_cases = sum(cases)) |>
arrange(year, month) |>
kable(col.names = c('Year', 'Month', 'Total_Cases'))
casesq13
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
# Your code here
deaths <- request(deaths_url) |>
req_url_query(`$limit` = "10000000000") |>
req_perform() |>
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(deaths = as.numeric(deaths), date = as.Date(date)) |>
filter(!is.na(date) & !is.na(deaths))
# Your code here
deaths |>
group_by(state) |>
filter(!state %in% c('United States', 'New York City')) |>
summarize(total_Deaths = sum(deaths)) |>
arrange(desc(total_Deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, -total_Deaths), y = total_Deaths/100000, fill = state)) +
geom_col() +
coord_flip() +                  # flipped so state names are not crowded. Requirement of highest to lowest order is from bottom to top instead of left to right
labs(x = "State", y = "Total Deaths (Hundred Thousands)", title = "Total Covid-19 Deaths by State in the US")
View(census_key)
census_key <- source("census-key.R")
census_key <- source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(paste0("https://api.census.gov/data/2021/pep/population?get=POP_2020,POP_2021,NAME&for=state:*&key=", census_key$value))
response <- req_perform(request)
# response status checked but not printed as GET portion of printed response shows my API Key
resp_content_type(response)
# check out how to use lapply or sapply instead of simplifyMAtrix
population <- resp_body_json(response, simplifyMatrix = TRUE)
View(population)
census_key <- source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(paste0("https://api.census.gov/data/2021/pep/population?get=POP_2020,POP_2021,NAME&for=state:*&key=", census_key$value))
response <- req_perform(request)
# response status checked but not printed as GET portion of printed response shows my API Key
resp_content_type(response)
population <- resp_body_json(response, simplifyMatrix = TRUE)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- do.call(rbind, population) |>              # applies the rbind function to all sublists
as.data.frame() |>                                     # converts to data frame
row_to_names(row_number = 1) |>                        # first row becomes the header
as_tibble() |>                                         # convert to tibble
select(-state) |>                                      # removes the stateID column
rename(state_Name = NAME) |>                           # rename name column to state_name
pivot_longer(cols = starts_with("POP_"),               # use pivot_longer to tidy. makes it so we have a column for population and one for year
names_to = "year",
values_to = "population") |>
mutate(year = gsub("POP_", "", year),                  # remove 'POP_' text from year
population = as.numeric(population/100000),            # parse population column to numeric
state = case_when(                              # use case_when to add abbreviations for DC and PR
state_Name == "District of Columbia" ~ "DC",
state_Name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_Name, state.name)]))  # add state abbreviations using state.abb
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- do.call(rbind, population) |>              # applies the rbind function to all sublists
as.data.frame() |>                                     # converts to data frame
row_to_names(row_number = 1) |>                        # first row becomes the header
as_tibble() |>                                         # convert to tibble
select(-state) |>                                      # removes the stateID column
rename(state_Name = NAME) |>                           # rename name column to state_name
pivot_longer(cols = starts_with("POP_"),               # use pivot_longer to tidy. makes it so we have a column for population and one for year
names_to = "year",
values_to = "population") |>
mutate(year = gsub("POP_", "", year),                  # remove 'POP_' text from year
population = as.numeric(population)/100000,            # parse population column to numeric
state = case_when(                              # use case_when to add abbreviations for DC and PR
state_Name == "District of Columbia" ~ "DC",
state_Name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_Name, state.name)]))  # add state abbreviations using state.abb
library(ggplot2)
library(dplyr)
population |>
group_by(year) |>
mutate(state_Name = factor(state_Name, levels = state_Name[order(population)])) |>
ungroup() |>
ggplot(aes(x = state_Name, y = population, fill = year)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(x = "State", y = "Population", title = "State Populations by Year") +
theme_minimal()
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- do.call(rbind, population) |>              # applies the rbind function to all sublists
as.data.frame() |>                                     # converts to data frame
row_to_names(row_number = 1) |>                        # first row becomes the header
as_tibble() |>                                         # convert to tibble
select(-state) |>                                      # removes the stateID column
rename(state_Name = NAME) |>                           # rename name column to state_name
pivot_longer(cols = starts_with("POP_"),               # use pivot_longer to tidy. makes it so we have a column for population and one for year
names_to = "year",
values_to = "population") |>
mutate(year = gsub("POP_", "", year),                  # remove 'POP_' text from year
population = as.numeric(population),            # parse population column to numeric
state = case_when(                              # use case_when to add abbreviations for DC and PR
state_Name == "District of Columbia" ~ "DC",
state_Name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_Name, state.name)]))  # add state abbreviations using state.abb
population <- resp_body_json(response, simplifyMatrix = TRUE)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- do.call(rbind, population) |>              # applies the rbind function to all sublists
as.data.frame() |>                                     # converts to data frame
row_to_names(row_number = 1) |>                        # first row becomes the header
as_tibble() |>                                         # convert to tibble
select(-state) |>                                      # removes the stateID column
rename(state_Name = NAME) |>                           # rename name column to state_name
pivot_longer(cols = starts_with("POP_"),               # use pivot_longer to tidy. makes it so we have a column for population and one for year
names_to = "year",
values_to = "population") |>
mutate(year = gsub("POP_", "", year),                  # remove 'POP_' text from year
population = as.numeric(population),            # parse population column to numeric
state = case_when(                              # use case_when to add abbreviations for DC and PR
state_Name == "District of Columbia" ~ "DC",
state_Name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_Name, state.name)]))  # add state abbreviations using state.abb
library(ggplot2)
library(dplyr)
population |>
group_by(year) |>
mutate(state_Name = factor(state_Name, levels = state_Name[order(population)])) |>
ungroup() |>
ggplot(aes(x = state_Name, y = population/1000000, fill = year)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(x = "State", y = "Population", title = "State Populations by Year") +
theme_minimal()
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases<- request(api) |>
req_url_query(`$limit` = "10000000000") |>
req_perform() |>
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases) |>
mutate(cases = as.numeric(cases),
date = as.Date(date))
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
)
census_key <- source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(paste0("https://api.census.gov/data/2021/pep/population?get=POP_2020,POP_2021,NAME&for=state:*&key=", census_key$value))
response <- req_perform(request)
# response status checked but not printed as GET portion of printed response shows my API Key
resp_content_type(response)
population <- resp_body_json(response, simplifyMatrix = TRUE)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- do.call(rbind, population) |>              # applies the rbind function to all sublists
as.data.frame() |>                                     # converts to data frame
row_to_names(row_number = 1) |>                        # first row becomes the header
as_tibble() |>                                         # convert to tibble
select(-state) |>                                      # removes the stateID column
rename(state_Name = NAME) |>                           # rename name column to state_name
pivot_longer(cols = starts_with("POP_"),               # use pivot_longer to tidy. makes it so we have a column for population and one for year
names_to = "year",
values_to = "population") |>
mutate(year = gsub("POP_", "", year),                  # remove 'POP_' text from year
population = as.numeric(population),            # parse population column to numeric
state = case_when(                              # use case_when to add abbreviations for DC and PR
state_Name == "District of Columbia" ~ "DC",
state_Name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_Name, state.name)]))  # add state abbreviations using state.abb
library(ggplot2)
library(dplyr)
population |>
group_by(year) |>
mutate(state_Name = factor(state_Name, levels = state_Name[order(population)])) |>
ungroup() |>
ggplot(aes(x = state_Name, y = population/1000000, fill = year)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(x = "State", y = "Population (Millions)", title = "State Populations by Year") +
theme_minimal()
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
regions <- fromJSON(url) |>
as.data.frame() |>
tidyr::unnest(states) |>                        # gets states out of vector into individual rows
mutate(region_name = ifelse( region_name == "New York and New Jersey, Puerto Rico, Virgin Islands", "NY, NJ, PR, Virgin Islands", region_name), states = as.character(states)) |>
rename(state_Name = states)
population <- population |>
mutate(state_Name = as.character(state_Name)) |>                 # changes to character type so join works by two character vectors
left_join(regions, by = "state_Name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query() |>
req_perform() |>
resp_body_json(simplifyDataFrame = TRUE)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases<- request(api) |>
req_url_query(`$limit` = "10000000000") |>
req_perform() |>
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases) |>
mutate(cases = as.numeric(cases),
date = as.Date(date))
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date), date = as.Date(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date), date = as.numeric(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_grid(~region_name) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_grid(~region_name, ncol = 3) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name, ncol = 3) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name, ncol = 2) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name, ncol = 5) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name, ncol = 2) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
) +
theme(legend.position = "none")
population$year <- as.numeric(population$year)        # to allow joins by the year column
cases |>
mutate(year = year(date)) |>                          # extract year
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state", "year")) |>
filter(!is.na(population)) |>
mutate(cases_per_100k = 100000 * cases/population) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~region_name, ncol = 2) +
labs(
title = "COVID-19 Cases per 100,000 by Region (2020â€“2021)",
x = "Date",
y = "Cases per 100,000"
)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- do.call(rbind, population) |>              # applies the rbind function to all sublists
as.data.frame() |>                                     # converts to data frame
row_to_names(row_number = 1) |>                        # first row becomes the header
as_tibble() |>                                         # convert to tibble
select(-state) |>                                      # removes the stateID column
rename(state_Name = NAME) |>                           # rename name column to state_name
pivot_longer(cols = starts_with("POP_"),               # use pivot_longer to tidy. makes it so we have a column for population and one for year
names_to = "year",
values_to = "population") |>
mutate(year = gsub("POP_", "", year),                  # remove 'POP_' text from year
population = as.numeric(population),            # parse population column to numeric
state = case_when(                              # use case_when to add abbreviations for DC and PR
state_Name == "District of Columbia" ~ "DC",
state_Name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_Name, state.name)]))  # add state abbreviations using state.abb
population <- resp_body_json(response, simplifyMatrix = TRUE)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- do.call(rbind, population) |>              # applies the rbind function to all sublists
as.data.frame() |>                                     # converts to data frame
row_to_names(row_number = 1) |>                        # first row becomes the header
as_tibble() |>                                         # convert to tibble
select(-state) |>                                      # removes the stateID column
rename(state_Name = NAME) |>                           # rename name column to state_name
pivot_longer(cols = starts_with("POP_"),               # use pivot_longer to tidy. makes it so we have a column for population and one for year
names_to = "year",
values_to = "population") |>
mutate(year = gsub("POP_", "", year),                  # remove 'POP_' text from year
population = as.numeric(population),            # parse population column to numeric
state = case_when(                              # use case_when to add abbreviations for DC and PR
state_Name == "District of Columbia" ~ "DC",
state_Name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_Name, state.name)]))  # add state abbreviations using state.abb
View(population)
